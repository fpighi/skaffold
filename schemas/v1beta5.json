{
  "type": "object",
  "oneOf": [
    {
      "$ref": "#/definitions/SkaffoldPipeline"
    }
  ],
  "definitions": {
    "SkaffoldPipeline": {
      "properties": {
        "apiVersion": {
          "type": "string",
          "default": "\"\""
        },
        "kind": {
          "type": "string",
          "default": "\"\""
        },
        "build": {
          "$ref": "#/definitions/BuildConfig",
          "description": "describes how images are built."
        },
        "test": {
          "$ref": "#/definitions/TestConfig",
          "description": "describes how images are tested."
        },
        "deploy": {
          "$ref": "#/definitions/DeployConfig",
          "description": "describes how images are deployed."
        },
        "profiles": {
          "items": {
            "$ref": "#/definitions/Profile"
          },
          "type": "array",
          "description": "(beta) can override be used to \u003ccode\u003ebuild\u003c/code\u003e, \u003ccode\u003etest\u003c/code\u003e or \u003ccode\u003edeploy\u003c/code\u003e configuration."
        }
      }
    },
    "BuildConfig": {
      "properties": {
        "artifacts": {
          "items": {
            "$ref": "#/definitions/Artifact"
          },
          "type": "array",
          "description": "lists the images you're going to be building."
        },
        "tagPolicy": {
          "$ref": "#/definitions/TagPolicy",
          "description": "(beta) determines how images are tagged. A few strategies are provided here, although you most likely won't need to care! The policy can be \u003ccode\u003egitCommit\u003c/code\u003e (beta), \u003ccode\u003esha256\u003c/code\u003e (beta), \u003ccode\u003eenvTemplate\u003c/code\u003e (beta) or \u003ccode\u003edateTime\u003c/code\u003e (beta). If not specified, it defaults to \u003ccode\u003egitCommit: {}\u003c/code\u003e."
        },
        "executionEnvironment": {
          "$ref": "#/definitions/ExecutionEnvironment"
        }
      },
      "oneOf": [
        {
          "properties": {
            "local": {
              "$ref": "#/definitions/LocalBuild",
              "description": "describes how to do a build on the local docker daemon and optionally push to a repository."
            }
          }
        },
        {
          "properties": {
            "googleCloudBuild": {
              "$ref": "#/definitions/GoogleCloudBuild",
              "description": "describes how to do a remote build on \u003ca href=\"https://cloud.google.com/cloud-build/\"\u003eGoogle Cloud Build\u003c/a\u003e."
            }
          }
        },
        {
          "properties": {
            "kaniko": {
              "$ref": "#/definitions/KanikoBuild",
              "description": "describes how to do an on-cluster build using \u003ca href=\"https://github.com/GoogleContainerTools/kaniko\"\u003eKaniko\u003c/a\u003e."
            }
          }
        }
      ],
      "description": "contains all the configuration for the build steps."
    },
    "ExecEnvironment": {
      "type": "string",
      "default": "\"\""
    },
    "ExecutionEnvironment": {
      "properties": {
        "name": {
          "$ref": "#/definitions/ExecEnvironment"
        },
        "properties": {
          "additionalProperties": {},
          "type": "object",
          "default": "{}"
        }
      },
      "description": "the environment in which the build should run (ex. local or in-cluster, etc.)"
    },
    "BuilderPlugin": {
      "properties": {
        "name": {
          "type": "string",
          "description": "of the build plugin",
          "default": "\"\""
        },
        "properties": {
          "additionalProperties": {},
          "type": "object",
          "description": "associated with the plugin",
          "default": "{}"
        },
        "": {
          "items": {
            "$ref": "#/definitions/byte"
          },
          "type": "array"
        }
      },
      "description": "contains all fields necessary for specifying a build plugin"
    },
    "TagPolicy": {
      "properties": {
        "gitCommit": {
          "$ref": "#/definitions/GitTagger",
          "description": "tags images with the git tag or git commit of the artifact workspace directory."
        },
        "sha256": {
          "$ref": "#/definitions/ShaTagger",
          "description": "tags images with their sha256 digest."
        },
        "envTemplate": {
          "$ref": "#/definitions/EnvTemplateTagger",
          "description": "tags images with a configurable template string."
        },
        "dateTime": {
          "$ref": "#/definitions/DateTimeTagger",
          "description": "tags images with the build timestamp."
        }
      },
      "description": "contains all the configuration for the tagging step."
    },
    "ShaTagger": {
      "description": "contains the configuration for the SHA tagger."
    },
    "GitTagger": {
      "description": "contains the configuration for the git tagger."
    },
    "EnvTemplateTagger": {
      "required": [
        "template"
      ],
      "properties": {
        "template": {
          "type": "string",
          "description": "used to produce the image name and tag. See golang \u003ca href=\"https://golang.org/pkg/text/template/\"\u003etext/template\u003c/a\u003e syntax. The template is compiled and executed against the current environment, with those variables injected:   IMAGE_NAME   |  Name of the image being built, as supplied in the artifacts section.",
          "default": "\"\"",
          "examples": [
            "{{.RELEASE}}-{{.IMAGE_NAME}}"
          ]
        }
      },
      "description": "tags images with a configurable template string."
    },
    "DateTimeTagger": {
      "properties": {
        "format": {
          "type": "string",
          "description": "formats the date and time. See \u003ca href=\"https://golang.org/pkg/time/#Time.Format\"\u003e#Time.Format\u003c/a\u003e.",
          "default": "2006-01-02_15-04-05.999_MST"
        },
        "timezone": {
          "type": "string",
          "description": "sets the timezone for the date and time. See \u003ca href=\"https://golang.org/pkg/time/#Time.LoadLocation\"\u003eTime.LoadLocation\u003c/a\u003e. Defaults to the local timezone.",
          "default": "\"\""
        }
      },
      "description": "tags images with the build timestamp."
    },
    "BuildType": {
      "properties": {
        "local": {
          "$ref": "#/definitions/LocalBuild",
          "description": "describes how to do a build on the local docker daemon and optionally push to a repository."
        },
        "googleCloudBuild": {
          "$ref": "#/definitions/GoogleCloudBuild",
          "description": "describes how to do a remote build on \u003ca href=\"https://cloud.google.com/cloud-build/\"\u003eGoogle Cloud Build\u003c/a\u003e."
        },
        "kaniko": {
          "$ref": "#/definitions/KanikoBuild",
          "description": "describes how to do an on-cluster build using \u003ca href=\"https://github.com/GoogleContainerTools/kaniko\"\u003eKaniko\u003c/a\u003e."
        }
      },
      "description": "contains the specific implementation and parameters needed for the build step. Only one field should be populated."
    },
    "LocalBuild": {
      "properties": {
        "push": {
          "type": "boolean",
          "description": "should images be pushed to a registry. If not specified, images are pushed only if the current Kubernetes context connects to a remote cluster."
        },
        "useDockerCLI": {
          "type": "boolean",
          "description": "use \u003ccode\u003edocker\u003c/code\u003e command-line interface instead of Docker Engine APIs.",
          "default": "false"
        },
        "useBuildkit": {
          "type": "boolean",
          "description": "use BuildKit to build Docker images.",
          "default": "false"
        }
      },
      "description": "describes how to do a build on the local docker daemon and optionally push to a repository."
    },
    "GoogleCloudBuild": {
      "properties": {
        "projectId": {
          "type": "string",
          "description": "the ID of your Cloud Platform Project. If it is not provided, Skaffold will guess it from the image name. For example, given the artifact image name \u003ccode\u003egcr.io/myproject/image\u003c/code\u003e, Skaffold will use the \u003ccode\u003emyproject\u003c/code\u003e GCP project.",
          "default": "\"\""
        },
        "diskSizeGb": {
          "type": "number",
          "description": "the disk size of the VM that runs the build. See \u003ca href=\"https://cloud.google.com/cloud-build/docs/api/reference/rest/v1/projects.builds#buildoptions\"\u003eCloud Build Reference\u003c/a\u003e.",
          "default": "0"
        },
        "machineType": {
          "type": "string",
          "description": "the type of the VM that runs the build. See \u003ca href=\"https://cloud.google.com/cloud-build/docs/api/reference/rest/v1/projects.builds#buildoptions\"\u003eCloud Build Reference\u003c/a\u003e.",
          "default": "\"\""
        },
        "timeout": {
          "type": "string",
          "description": "the amount of time (in seconds) that this build should be allowed to run. See \u003ca href=\"https://cloud.google.com/cloud-build/docs/api/reference/rest/v1/projects.builds#resource-build\"\u003eCloud Build Reference\u003c/a\u003e.",
          "default": "\"\""
        },
        "dockerImage": {
          "type": "string",
          "description": "the image that runs a Docker build. See \u003ca href=\"https://cloud.google.com/cloud-build/docs/cloud-builders\"\u003eCloud Builders\u003c/a\u003e.",
          "default": "gcr.io/cloud-builders/docker"
        },
        "mavenImage": {
          "type": "string",
          "description": "the image that runs a Maven build. See \u003ca href=\"https://cloud.google.com/cloud-build/docs/cloud-builders\"\u003eCloud Builders\u003c/a\u003e.",
          "default": "gcr.io/cloud-builders/mvn"
        },
        "gradleImage": {
          "type": "string",
          "description": "the image that runs a Gradle build. See \u003ca href=\"https://cloud.google.com/cloud-build/docs/cloud-builders\"\u003eCloud Builders\u003c/a\u003e.",
          "default": "gcr.io/cloud-builders/gradle"
        }
      },
      "description": "describes how to do a remote build on \u003ca href=\"https://cloud.google.com/cloud-build/docs/\"\u003eGoogle Cloud Build\u003c/a\u003e. Docker and Jib artifacts can be built on Cloud Build. The \u003ccode\u003eprojectId\u003c/code\u003e needs to be provided and the currently logged in user should be given permissions to trigger new builds."
    },
    "LocalDir": {
      "description": "configures how Kaniko mounts sources directly via an \u003ccode\u003eemptyDir\u003c/code\u003e volume."
    },
    "KanikoBuildContext": {
      "properties": {
        "gcsBucket": {
          "type": "string",
          "description": "the CGS bucket to which sources are uploaded by Skaffold. Kaniko will need access to that bucket to download the sources.",
          "default": "\"\""
        },
        "localDir": {
          "$ref": "#/definitions/LocalDir",
          "description": "configures how Kaniko mounts sources directly via an \u003ccode\u003eemptyDir\u003c/code\u003e volume."
        }
      },
      "description": "contains the different fields available to specify a Kaniko build context."
    },
    "KanikoCache": {
      "properties": {
        "repo": {
          "type": "string",
          "description": "a remote repository to store cached layers. If none is specified, one will be inferred from the image name. See \u003ca href=\"https://github.com/GoogleContainerTools/kaniko#caching\"\u003eKaniko Caching\u003c/a\u003e.",
          "default": "\"\""
        }
      },
      "description": "configures Kaniko caching. If a cache is specified, Kaniko will use a remote cache which will speed up builds."
    },
    "KanikoBuild": {
      "properties": {
        "buildContext": {
          "$ref": "#/definitions/KanikoBuildContext",
          "description": "defines where Kaniko gets the sources from."
        },
        "cache": {
          "$ref": "#/definitions/KanikoCache",
          "description": "configures Kaniko caching. If a cache is specified, Kaniko will use a remote cache which will speed up builds."
        },
        "flags": {
          "items": {
            "type": "string",
            "default": "\"\""
          },
          "type": "array",
          "description": "additional flags to be passed to Kaniko command line. See \u003ca href=\"https://github.com/GoogleContainerTools/kaniko#additional-flags\"\u003eKaniko Additional Flags\u003c/a\u003e.",
          "default": "[]"
        },
        "pullSecret": {
          "type": "string",
          "description": "the path to the secret key file. See \u003ca href=\"https://github.com/GoogleContainerTools/kaniko#running-kaniko-in-a-kubernetes-cluster\"\u003eKaniko Documentation\u003c/a\u003e.",
          "default": "\"\""
        },
        "pullSecretName": {
          "type": "string",
          "description": "the name of the Kubernetes secret for pulling the files from the build context and pushing the final image.",
          "default": "kaniko-secret"
        },
        "namespace": {
          "type": "string",
          "description": "the Kubernetes namespace. Defaults to current namespace in Kubernetes configuration.",
          "default": "\"\""
        },
        "timeout": {
          "type": "string",
          "description": "the amount of time (in seconds) that this build is allowed to run. Defaults to 20 minutes (\u003ccode\u003e20m\u003c/code\u003e).",
          "default": "\"\""
        },
        "image": {
          "type": "string",
          "description": "the Docker image used by the Kaniko pod. Defaults to the latest released version of \u003ccode\u003egcr.io/kaniko-project/executor\u003c/code\u003e.",
          "default": "\"\""
        },
        "dockerConfig": {
          "$ref": "#/definitions/DockerConfig",
          "description": "describes how to mount the local Docker configuration into the Kaniko pod."
        },
        "secrets": {
          "items": {
            "$ref": "#/definitions/Secret"
          },
          "type": "array",
          "description": "Kaniko pod secrets"
        }
      },
      "description": "describes how to do an on-cluster build using \u003ca href=\"https://github.com/GoogleContainerTools/kaniko\"\u003eKaniko\u003c/a\u003e."
    },
    "DockerConfig": {
      "properties": {
        "path": {
          "type": "string",
          "description": "the path to the docker \u003ccode\u003econfig.json\u003c/code\u003e.",
          "default": "\"\""
        },
        "secretName": {
          "type": "string",
          "description": "the Kubernetes secret that will hold the Docker configuration.",
          "default": "\"\""
        }
      },
      "description": "contains information about the docker \u003ccode\u003econfig.json\u003c/code\u003e to mount."
    },
    "Secret": {
      "properties": {
        "name": {
          "type": "string",
          "default": "\"\""
        },
        "path": {
          "type": "string",
          "default": "\"\""
        },
        "mountPath": {
          "type": "string",
          "default": "\"\""
        }
      },
      "description": "represens a Kubernetes secret that is mounted"
    },
    "TestConfig": {
      "items": {
        "$ref": "#/definitions/TestCase"
      },
      "type": "array"
    },
    "TestCase": {
      "required": [
        "image"
      ],
      "properties": {
        "image": {
          "type": "string",
          "description": "the artifact on which to run those tests.",
          "default": "\"\""
        },
        "structureTests": {
          "items": {
            "type": "string",
            "default": "\"\""
          },
          "type": "array",
          "description": "lists the \u003ca href=\"https://github.com/GoogleContainerTools/container-structure-test\"\u003eContainer Structure Tests\u003c/a\u003e to run on that artifact.",
          "default": "[]",
          "examples": [
            "[\"./test/*\"]"
          ]
        }
      },
      "description": "a list of structure tests to run on images that Skaffold builds."
    },
    "DeployConfig": {
      "oneOf": [
        {
          "properties": {
            "helm": {
              "$ref": "#/definitions/HelmDeploy"
            }
          }
        },
        {
          "properties": {
            "kubectl": {
              "$ref": "#/definitions/KubectlDeploy",
              "description": "uses a client side \u003ccode\u003ekubectl apply\u003c/code\u003e to apply the manifests to the cluster. You'll need a kubectl CLI version installed that's compatible with your cluster."
            }
          }
        },
        {
          "properties": {
            "kustomize": {
              "$ref": "#/definitions/KustomizeDeploy",
              "description": "uses the \u003ccode\u003ekustomize\u003c/code\u003e CLI to \u0026quot;patch\u0026quot; a deployment for a target environment."
            }
          }
        }
      ],
      "description": "contains all the configuration needed by the deploy steps."
    },
    "DeployType": {
      "properties": {
        "helm": {
          "$ref": "#/definitions/HelmDeploy"
        },
        "kubectl": {
          "$ref": "#/definitions/KubectlDeploy",
          "description": "uses a client side \u003ccode\u003ekubectl apply\u003c/code\u003e to apply the manifests to the cluster. You'll need a kubectl CLI version installed that's compatible with your cluster."
        },
        "kustomize": {
          "$ref": "#/definitions/KustomizeDeploy",
          "description": "uses the \u003ccode\u003ekustomize\u003c/code\u003e CLI to \u0026quot;patch\u0026quot; a deployment for a target environment."
        }
      },
      "description": "contains the specific implementation and parameters needed for the deploy step. Only one field should be populated."
    },
    "KubectlDeploy": {
      "properties": {
        "manifests": {
          "items": {
            "type": "string",
            "default": "\"\""
          },
          "type": "array",
          "description": "lists the Kubernetes yaml or json manifests.",
          "default": "[\"k8s/*.yaml\"]"
        },
        "remoteManifests": {
          "items": {
            "type": "string",
            "default": "\"\""
          },
          "type": "array",
          "description": "lists Kubernetes manifests in remote clusters.",
          "default": "[]"
        },
        "flags": {
          "$ref": "#/definitions/KubectlFlags",
          "description": "additional flags to pass to \u003ccode\u003ekubectl\u003c/code\u003e."
        }
      },
      "description": "contains the configuration needed for deploying with \u003ccode\u003ekubectl apply\u003c/code\u003e."
    },
    "KubectlFlags": {
      "properties": {
        "global": {
          "items": {
            "type": "string",
            "default": "\"\""
          },
          "type": "array",
          "description": "additional flags passed on every command.",
          "default": "[]"
        },
        "apply": {
          "items": {
            "type": "string",
            "default": "\"\""
          },
          "type": "array",
          "description": "additional flags passed on creations (\u003ccode\u003ekubectl apply\u003c/code\u003e).",
          "default": "[]"
        },
        "delete": {
          "items": {
            "type": "string",
            "default": "\"\""
          },
          "type": "array",
          "description": "additional flags passed on deletions (\u003ccode\u003ekubectl delete\u003c/code\u003e).",
          "default": "[]"
        }
      },
      "description": "additional flags passed on the command line to kubectl either on every command (Global), on creations (Apply) or deletions (Delete)."
    },
    "HelmDeploy": {
      "required": [
        "releases"
      ],
      "properties": {
        "releases": {
          "items": {
            "$ref": "#/definitions/HelmRelease"
          },
          "type": "array",
          "description": "a list of Helm releases."
        }
      },
      "description": "contains the configuration needed for deploying with \u003ccode\u003ehelm\u003c/code\u003e."
    },
    "KustomizeDeploy": {
      "properties": {
        "path": {
          "type": "string",
          "description": "the path to Kustomization files.",
          "default": "."
        },
        "flags": {
          "$ref": "#/definitions/KubectlFlags",
          "description": "additional flags to pass to \u003ccode\u003ekubectl\u003c/code\u003e."
        }
      },
      "description": "contains the configuration needed for deploying with \u003ccode\u003ekustomize\u003c/code\u003e."
    },
    "HelmRelease": {
      "required": [
        "name",
        "chartPath"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "the name of the Helm release.",
          "default": "\"\""
        },
        "chartPath": {
          "type": "string",
          "description": "the path to the Helm chart.",
          "default": "\"\""
        },
        "valuesFiles": {
          "items": {
            "type": "string",
            "default": "\"\""
          },
          "type": "array",
          "description": "the paths to the Helm \u003ccode\u003evalues\u003c/code\u003e files\u0026quot;.",
          "default": "[]"
        },
        "values": {
          "additionalProperties": {
            "type": "string",
            "default": "\"\""
          },
          "type": "object",
          "description": "key-value pairs supplementing the Helm \u003ccode\u003evalues\u003c/code\u003e file\u0026quot;.",
          "default": "{}"
        },
        "namespace": {
          "type": "string",
          "description": "the Kubernetes namespace.",
          "default": "\"\""
        },
        "version": {
          "type": "string",
          "description": "the version of the chart.",
          "default": "\"\""
        },
        "setValues": {
          "additionalProperties": {
            "type": "string",
            "default": "\"\""
          },
          "type": "object",
          "description": "key-value pairs. If present, Skaffold will send \u003ccode\u003e--set\u003c/code\u003e flag to Helm CLI and append all pairs after the flag.",
          "default": "{}"
        },
        "setValueTemplates": {
          "additionalProperties": {
            "type": "string",
            "default": "\"\""
          },
          "type": "object",
          "description": "key-value pairs. If present, Skaffold will try to parse the value part of each key-value pair using environment variables in the system, then send \u003ccode\u003e--set\u003c/code\u003e flag to Helm CLI and append all parsed pairs after the flag.",
          "default": "{}"
        },
        "wait": {
          "type": "boolean",
          "description": "if \u003ccode\u003etrue\u003c/code\u003e, Skaffold will send \u003ccode\u003e--wait\u003c/code\u003e flag to Helm CLI.",
          "default": "false"
        },
        "recreatePods": {
          "type": "boolean",
          "description": "if \u003ccode\u003etrue\u003c/code\u003e, Skaffold will send \u003ccode\u003e--recreate-pods\u003c/code\u003e flag to Helm CLI.",
          "default": "false"
        },
        "skipBuildDependencies": {
          "type": "boolean",
          "default": "false"
        },
        "overrides": {
          "additionalProperties": {},
          "type": "object",
          "description": "key-value pairs. If present, Skaffold will build a Helm \u003ccode\u003evalues\u003c/code\u003e file that overrides the original and use it to call Helm CLI (\u003ccode\u003e--f\u003c/code\u003e flag).",
          "default": "{}"
        },
        "packaged": {
          "$ref": "#/definitions/HelmPackaged",
          "description": "parameters for packaging helm chart (\u003ccode\u003ehelm package\u003c/code\u003e)."
        },
        "imageStrategy": {
          "$ref": "#/definitions/HelmImageStrategy",
          "description": "adds image configurations to the Helm \u003ccode\u003evalues\u003c/code\u003e file."
        }
      }
    },
    "HelmPackaged": {
      "properties": {
        "version": {
          "type": "string",
          "description": "sets the \u003ccode\u003eversion\u003c/code\u003e on the chart to this semver version.",
          "default": "\"\""
        },
        "appVersion": {
          "type": "string",
          "description": "sets the \u003ccode\u003eappVersion\u003c/code\u003e on the chart to this version.",
          "default": "\"\""
        }
      },
      "description": "parameters for packaging helm chart (\u003ccode\u003ehelm package\u003c/code\u003e)."
    },
    "HelmImageStrategy": {
      "oneOf": [
        {
          "properties": {
            "fqn": {
              "$ref": "#/definitions/HelmFQNConfig",
              "description": "the image configuration uses the syntax \u003ccode\u003eIMAGE-NAME=IMAGE-REPOSITORY:IMAGE-TAG\u003c/code\u003e."
            }
          }
        },
        {
          "properties": {
            "helm": {
              "$ref": "#/definitions/HelmConventionConfig",
              "description": "the image configuration uses the syntax \u003ccode\u003eIMAGE-NAME.repository=IMAGE-REPOSITORY, IMAGE-NAME.tag=IMAGE-TAG\u003c/code\u003e."
            }
          }
        }
      ],
      "description": "adds image configurations to the Helm \u003ccode\u003evalues\u003c/code\u003e file."
    },
    "HelmImageConfig": {
      "properties": {
        "fqn": {
          "$ref": "#/definitions/HelmFQNConfig",
          "description": "the image configuration uses the syntax \u003ccode\u003eIMAGE-NAME=IMAGE-REPOSITORY:IMAGE-TAG\u003c/code\u003e."
        },
        "helm": {
          "$ref": "#/definitions/HelmConventionConfig",
          "description": "the image configuration uses the syntax \u003ccode\u003eIMAGE-NAME.repository=IMAGE-REPOSITORY, IMAGE-NAME.tag=IMAGE-TAG\u003c/code\u003e."
        }
      }
    },
    "HelmFQNConfig": {
      "properties": {
        "property": {
          "type": "string",
          "default": "\"\""
        }
      },
      "description": "the image config to use the FullyQualifiedImageName as param to set."
    },
    "HelmConventionConfig": {
      "description": "the image config in the syntax of image.repository and image.tag."
    },
    "Artifact": {
      "required": [
        "image"
      ],
      "properties": {
        "image": {
          "type": "string",
          "description": "the name of the image to be built.",
          "default": "\"\""
        },
        "context": {
          "type": "string",
          "description": "the directory where the artifact's sources are to be found.",
          "default": "."
        },
        "sync": {
          "additionalProperties": {
            "type": "string",
            "default": "\"\""
          },
          "type": "object",
          "description": "lists local files that can be synced to remote pods (alpha) instead of triggering an image build when modified. This is a mapping of local files to sync to remote folders.",
          "default": "{}",
          "examples": [
            "{'*.py': .}"
          ]
        },
        "plugin": {
          "$ref": "#/definitions/BuilderPlugin",
          "description": "The plugin used to build this artifact"
        }
      },
      "oneOf": [
        {
          "properties": {
            "docker": {
              "$ref": "#/definitions/DockerArtifact",
              "description": "describes an artifact built from a Dockerfile, usually using \u003ccode\u003edocker build\u003c/code\u003e."
            }
          }
        },
        {
          "properties": {
            "bazel": {
              "$ref": "#/definitions/BazelArtifact",
              "description": "requires bazel CLI to be installed and the artifacts sources to contain \u003ca href=\"https://bazel.build/\"\u003eBazel\u003c/a\u003e configuration files."
            }
          }
        },
        {
          "properties": {
            "jibMaven": {
              "$ref": "#/definitions/JibMavenArtifact",
              "description": "builds images using the \u003ca href=\"https://github.com/GoogleContainerTools/jib/tree/master/jib-maven-plugin\"\u003eJib plugin for Maven\u003c/a\u003e."
            }
          }
        },
        {
          "properties": {
            "jibGradle": {
              "$ref": "#/definitions/JibGradleArtifact",
              "description": "builds images using the \u003ca href=\"https://github.com/GoogleContainerTools/jib/tree/master/jib-gradle-plugin\"\u003eJib plugin for Gradle\u003c/a\u003e."
            }
          }
        }
      ],
      "description": "the items that need to be built, along with the context in which they should be built."
    },
    "Profile": {
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "a unique profile name.",
          "default": "\"\""
        },
        "build": {
          "$ref": "#/definitions/BuildConfig",
          "description": "replaces the main \u003ccode\u003ebuild\u003c/code\u003e configuration."
        },
        "test": {
          "$ref": "#/definitions/TestConfig",
          "description": "replaces the main \u003ccode\u003etest\u003c/code\u003e configuration."
        },
        "deploy": {
          "$ref": "#/definitions/DeployConfig",
          "description": "replaces the main \u003ccode\u003edeploy\u003c/code\u003e configuration."
        },
        "patches": {
          "description": "a list of patches that will modify the default configuration. This is used to not replace a whole configuration section but change a few values. Each patch uses the JSON patch notation. For example, this profile will replace the \u003ccode\u003edockerfile\u003c/code\u003e value of the first artifact by \u003ccode\u003eDockerfile.DEV\u003c/code\u003e.",
          "examples": [
            "[{path: /build/artifacts/0/docker/dockerfile, value: Dockerfile.DEV}]"
          ]
        },
        "activation": {
          "items": {
            "$ref": "#/definitions/Activation"
          },
          "type": "array",
          "description": "criteria by which a profile can be auto-activated. This can be based on Environment Variables, the current Kubernetes context name, or depending on which Skaffold command is running."
        }
      },
      "description": "(beta) profiles are used to override any \u003ccode\u003ebuild\u003c/code\u003e, \u003ccode\u003etest\u003c/code\u003e or \u003ccode\u003edeploy\u003c/code\u003e configuration."
    },
    "Activation": {
      "properties": {
        "env": {
          "type": "string",
          "description": "holds a key=value pair. The profile is auto-activated if an Environment Variable \u003ccode\u003ekey\u003c/code\u003e has value \u003ccode\u003evalue\u003c/code\u003e.",
          "default": "\"\"",
          "examples": [
            "ENV=production"
          ]
        },
        "kubeContext": {
          "type": "string",
          "description": "a Kubernetes context for which a profile is auto-activated.",
          "default": "\"\"",
          "examples": [
            "minikube"
          ]
        },
        "command": {
          "type": "string",
          "description": "a Skaffold command for which a profile is auto-activated.",
          "default": "\"\"",
          "examples": [
            "dev"
          ]
        }
      },
      "description": "criteria by which a profile is auto-activated."
    },
    "ArtifactType": {
      "properties": {
        "docker": {
          "$ref": "#/definitions/DockerArtifact",
          "description": "describes an artifact built from a Dockerfile, usually using \u003ccode\u003edocker build\u003c/code\u003e."
        },
        "bazel": {
          "$ref": "#/definitions/BazelArtifact",
          "description": "requires bazel CLI to be installed and the artifacts sources to contain \u003ca href=\"https://bazel.build/\"\u003eBazel\u003c/a\u003e configuration files."
        },
        "jibMaven": {
          "$ref": "#/definitions/JibMavenArtifact",
          "description": "builds images using the \u003ca href=\"https://github.com/GoogleContainerTools/jib/tree/master/jib-maven-plugin\"\u003eJib plugin for Maven\u003c/a\u003e."
        },
        "jibGradle": {
          "$ref": "#/definitions/JibGradleArtifact",
          "description": "builds images using the \u003ca href=\"https://github.com/GoogleContainerTools/jib/tree/master/jib-gradle-plugin\"\u003eJib plugin for Gradle\u003c/a\u003e."
        }
      }
    },
    "DockerArtifact": {
      "properties": {
        "dockerfile": {
          "type": "string",
          "description": "locates the Dockerfile relative to workspace.",
          "default": "Dockerfile"
        },
        "buildArgs": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object",
          "description": "arguments passed to the docker build.",
          "default": "{}",
          "examples": [
            "{key1: \"value1\", key2: \"value2\"}"
          ]
        },
        "cacheFrom": {
          "items": {
            "type": "string",
            "default": "\"\""
          },
          "type": "array",
          "description": "lists the Docker images to consider as cache sources.",
          "default": "[]",
          "examples": [
            "[\"golang:1.10.1-alpine3.7\", \"alpine:3.7\"]"
          ]
        },
        "target": {
          "type": "string",
          "description": "the Dockerfile target name to build.",
          "default": "\"\""
        }
      },
      "description": "describes an artifact built from a Dockerfile, usually using \u003ccode\u003edocker build\u003c/code\u003e."
    },
    "BazelArtifact": {
      "required": [
        "target"
      ],
      "properties": {
        "target": {
          "type": "string",
          "description": "the \u003ccode\u003ebazel build\u003c/code\u003e target to run.",
          "default": "\"\"",
          "examples": [
            "//:skaffold_example.tar"
          ]
        },
        "args": {
          "items": {
            "type": "string",
            "default": "\"\""
          },
          "type": "array",
          "description": "additional args to pass to \u003ccode\u003ebazel build\u003c/code\u003e.",
          "default": "[]",
          "examples": [
            "[\"arg1\", \"arg2\"]"
          ]
        }
      },
      "description": "describes an artifact built with \u003ca href=\"https://bazel.build/\"\u003eBazel\u003c/a\u003e."
    },
    "JibMavenArtifact": {
      "properties": {
        "module": {
          "type": "string",
          "description": "selects which Maven module to build, for a multi module project.",
          "default": "\"\""
        },
        "profile": {
          "type": "string",
          "description": "selects which Maven profile to activate.",
          "default": "\"\""
        },
        "args": {
          "items": {
            "type": "string",
            "default": "\"\""
          },
          "type": "array",
          "description": "additional build flags passed to Maven.",
          "default": "[]"
        }
      },
      "description": "builds images using the \u003ca href=\"https://github.com/GoogleContainerTools/jib/tree/master/jib-maven-plugin\"\u003eJib plugin for Maven\u003c/a\u003e."
    },
    "JibGradleArtifact": {
      "properties": {
        "project": {
          "type": "string",
          "description": "selects which Gradle project to build.",
          "default": "\"\""
        },
        "args": {
          "items": {
            "type": "string",
            "default": "\"\""
          },
          "type": "array",
          "description": "additional build flags passed to Gradle.",
          "default": "[]"
        }
      },
      "description": "builds images using the \u003ca href=\"https://github.com/GoogleContainerTools/jib/tree/master/jib-gradle-plugin\"\u003eJib plugin for Gradle\u003c/a\u003e."
    }
  }
}
